[tool.black]
target-version = ["py310", "py311"]

[tool.isort]
# https://github.com/PyCQA/isort/wiki/isort-Settings
profile = "black"
# will group `import x` and `from x import` of the same module.
combine_as_imports = true
force_sort_within_sections = true
forced_separate = [
  "tests",
]
known_first_party = [
  "pytradfri",
  "tests",
]

[tool.pylint.MASTER]
ignore = []
py-version = "3.10"
# Use a conservative default here; 2 should speed up most setups and not hurt
# any too bad. Override on command line as appropriate.
extension-pkg-whitelist = "pydantic"
init-hook = 'from pylint.config.find_default_config_files import find_default_config_files; from pathlib import Path; import sys; sys.path.append(str(Path(Path(list(find_default_config_files())[0]).parent, "pylint/plugins")))'
jobs = 2
load-plugins = [
  "pylint.extensions.code_style",
  "pylint.extensions.typing",
  "pylint_strict_informational",
]
persistent = false

[tool.pylint.BASIC]
class-const-naming-style = "any"
good-names = [
  "_",
  "i",
  "id",
  "j",
  "k",
  "Run",
  "T",
]
max-args = 7

[tool.pylint."MESSAGES CONTROL"]
disable = [
  "format",
  # When Python 3.10 is the minimum version
  # (or pydantic is updated to support the new union syntax with Python 3.9)
  # we can remove this disable and change to the new syntax.
  "consider-alternative-union-syntax",
  "duplicate-code",
  "locally-disabled",
  "too-few-public-methods",
  "too-many-branches",
  "too-many-instance-attributes",
  "too-many-lines",
  "too-many-locals",
  "too-many-public-methods",
  "too-many-statements",
  "too-many-boolean-expressions",
  "unused-argument",
  "wrong-import-order",
]
enable = [
  "useless-suppression",
  "use-symbolic-message-instead",
]

[tool.pylint.REPORTS]
score = false

[tool.pylint.FORMAT]
expected-line-ending-format = "LF"

[tool.pylint.EXCEPTIONS]
overgeneral-exceptions = [
  "builtins.BaseException",
  "builtins.Exception",
]

[tool.pylint.TYPING]
runtime-typing = false

[tool.pylint.CODE_STYLE]
max-line-length-suggestions = 72

[tool.pytest.ini_options]
asyncio_mode = "auto"
norecursedirs = [
  ".git",
  "testing_config",
]
testpaths = [
  "tests",
]

[tool.mypy]
python_version = "3.10"
show_error_codes = true
follow_imports = "silent"
ignore_missing_imports = true
strict_equality = true
warn_incomplete_stub = true
warn_redundant_casts = true
warn_unused_configs = true
warn_unused_ignores = true
check_untyped_defs = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_return_any = true
warn_unreachable = true
plugins = "pydantic.mypy"
strict = true

[[tool.mypy.overrides]]
module = "tests.*"
ignore_errors = true

[tool.ruff]
target-version = "py310"

select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "I",  # isort
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "TRY004", # Prefer TypeError exception for invalid type
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

ignore = [
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
]

[tool.ruff.isort]
# will group `import x` and `from x import` of the same module.
combine-as-imports = true
force-sort-within-sections = true
forced-separate = [
  "tests",
]
known-first-party = [
  "pytradfri",
  "tests",
]

[tool.ruff.per-file-ignores]
# E402 Module level import not at top of file

"examples/debug_info.py" = ["E402"]
"examples/example_air_purifier_async.py" = ["E402"]
"examples/example_async.py" = ["E402"]
"examples/example_cover_async.py" = ["E402"]
"examples/example_pair.py" = ["E402"]
"examples/example_socket_async.py" = ["E402"]
"examples/example_sync.py" = ["E402"]
